BEGIN
    EXECUTE IMMEDIATE 'DROP SEQUENCE ISSUE_ID_SEQ';
    EXCEPTION
        WHEN OTHERS THEN
            IF SQLCODE!= -2289 THEN
            RAISE;
            END IF;
END;
/

CREATE SEQUENCE ISSUE_ID_SEQ
  MINVALUE 1
  MAXVALUE 100000
  START WITH 1
  INCREMENT BY 1;
/  

CREATE OR REPLACE TRIGGER ISSUE_TRG
BEFORE INSERT ON ISSUES
FOR EACH ROW
DECLARE
BORROW_NAME VARCHAR2(60);
BORROW_DESIGN VARCHAR2(60);
BOOK_NAME VARCHAR2(100);
BEGIN
IF :NEW.ISSUE_ID IS NULL THEN
      SELECT ISSUE_ID_SEQ.NEXTVAL into :NEW.ISSUE_ID from dual;
END IF;
IF :NEW.BORROWER_NAME IS NULL THEN
SELECT NAME INTO BORROW_NAME FROM USERS WHERE USER_ID = :NEW.BORROWER_ID;
SELECT BORROW_NAME INTO :NEW.BORROWER_NAME FROM DUAL;
END IF;
IF :NEW.BORROWER_DESIGNATION IS NULL THEN
SELECT DESIGNATION INTO BORROW_DESIGN FROM USERS WHERE USER_ID = :NEW.BORROWER_ID;
SELECT BORROW_DESIGN INTO :NEW.BORROWER_DESIGNATION FROM DUAL;
END IF;
IF :NEW.BOOK_TITLE IS NULL THEN
SELECT BOOK_TITLE INTO BOOK_NAME FROM BOOKS WHERE BOOK_ID = :NEW.BOOK_ID;
SELECT BOOK_NAME INTO :NEW.BOOK_TITLE FROM DUAL;
END IF;
END;
/


CREATE OR REPLACE TRIGGER ISSUE_EXPIRY
BEFORE INSERT ON ISSUES
FOR EACH ROW
DECLARE
student_expiration integer := 4;
staff_expiration integer := 5;
issuer_designation varchar2(50 CHAR);
BEGIN
IF :NEW.DATE_EXPIRY IS NULL THEN
SELECT designation INTO ISSUER_DESIGNATION FROM USERS WHERE user_id = :new.borrower_id;
 IF ISSUER_DESIGNATION = 'STUDENT' THEN
 SELECT (:new.issue_date + student_expiration) into :new.date_expiry from dual;
 elsif ISSUER_DESIGNATION = 'STAFF' THEN
 SELECT (:new.issue_date + staff_expiration) into :new.date_expiry from dual;
 END IF;
END IF;
END;
/

CREATE OR REPLACE TRIGGER RETURN_ID_TRG
BEFORE INSERT ON RETURNS
FOR EACH ROW
DECLARE
ID INTEGER;
BEGIN
IF :NEW.RETURN_ID IS NULL THEN
SELECT MAX(ISSUE_ID) INTO ID FROM ISSUES where BOOK_ID = :NEW.BOOK_ID;
SELECT ID INTO :NEW.RETURN_ID FROM DUAL;
END IF;
IF :NEW.BORROWER_ID IS NULL THEN
SELECT MAX(ISSUE_ID) INTO ID FROM ISSUES where BOOK_ID = :NEW.BOOK_ID;
SELECT BORROWER_ID INTO :NEW.BORROWER_ID FROM ISSUES WHERE ISSUE_ID = ID;
END IF;
IF :NEW.BORROWER_NAME IS NULL THEN
SELECT MAX(ISSUE_ID) INTO ID FROM ISSUES where BOOK_ID = :NEW.BOOK_ID;
SELECT BORROWER_NAME INTO :NEW.BORROWER_NAME FROM ISSUES WHERE ISSUE_ID = ID;
END IF;
IF :NEW.ISSUE_DATE IS NULL THEN
SELECT MAX(ISSUE_ID) INTO ID FROM ISSUES where BOOK_ID = :NEW.BOOK_ID;
SELECT ISSUE_DATE INTO :NEW.ISSUE_DATE FROM ISSUES WHERE ISSUE_ID = ID;
END IF;
IF :NEW.DEADLINE_DATE IS NULL THEN
SELECT MAX(ISSUE_ID) INTO ID FROM ISSUES where BOOK_ID = :NEW.BOOK_ID;
SELECT DATE_EXPIRY INTO :NEW.DEADLINE_DATE FROM ISSUES WHERE ISSUE_ID = ID;
END IF;
END;
/


CREATE OR REPLACE TRIGGER RETURN_DELAY_TRG
BEFORE INSERT ON RETURNS
FOR EACH ROW
DECLARE
ID INTEGER;
DEADLINE_DATE DATE;
date1 date;
date2 date;
BEGIN
IF :NEW.DELAY IS NULL THEN
SELECT MAX(ISSUE_ID) INTO ID FROM ISSUES where BOOK_ID = :NEW.BOOK_ID;
SELECT DATE_EXPIRY INTO DEADLINE_DATE FROM ISSUES where ISSUE_ID = ID;
date1 := to_date(DEADLINE_DATE, 'DD-MM-YYYY');
date2 := to_date(:new.return_date,'DD-MM-YYYY');
IF date2 - date1 <= 0 THEN
:NEW.DELAY := 0;
ELSIF date2 - date1  > 0 THEN
:new.delay := date2 - date1;
END IF;
END IF;
END;
/

CREATE OR REPLACE TRIGGER FINE_TRG
BEFORE INSERT ON FINE
FOR EACH ROW
DECLARE
ID INTEGER;
BEGIN
IF :NEW.FINE_ID IS NULL THEN
SELECT MAX(RETURN_ID) INTO ID FROM RETURNS where BOOK_ID = :NEW.BOOK_ID;
SELECT RETURN_ID INTO :NEW.FINE_ID FROM RETURNS WHERE RETURN_ID = ID;
END IF;
IF :NEW.BOOK_TITLE IS NULL THEN
SELECT MAX(ISSUE_ID) INTO ID FROM ISSUES where BOOK_ID = :NEW.BOOK_ID;
SELECT BOOK_TITLE INTO :NEW.BOOK_TITLE FROM ISSUES WHERE ISSUE_ID = ID;
END IF;
IF :NEW.BORROWER_ID IS NULL THEN
SELECT MAX(RETURN_ID) INTO ID FROM RETURNS where BOOK_ID = :NEW.BOOK_ID;
SELECT BORROWER_ID INTO :NEW.BORROWER_ID FROM RETURNS WHERE RETURN_ID = ID;
END IF;
IF :NEW.BORROWER_NAME IS NULL THEN
SELECT MAX(RETURN_ID) INTO ID FROM RETURNS where BOOK_ID = :NEW.BOOK_ID;
SELECT BORROWER_NAME INTO :NEW.BORROWER_NAME FROM RETURNS WHERE RETURN_ID = ID;
END IF;
IF :NEW.DELAY IS NULL THEN
SELECT MAX(RETURN_ID) INTO ID FROM RETURNS where BOOK_ID = :NEW.BOOK_ID;
SELECT DELAY INTO :NEW.DELAY FROM RETURNS WHERE RETURN_ID = ID;
END IF;
END;
/

create or replace trigger fine_amt_trg
BEFORE INSERT ON FINE
FOR EACH ROW
DECLARE
ID integer;
FINE_AMT number(38,0);
DELAY_DAYS integer;
BEGIN
IF :NEW.FINE_AMOUNT is NULL THEN
SELECT MAX(RETURN_ID) INTO ID FROM RETURNS where BOOK_ID = :NEW.BOOK_ID;
SELECT DELAY*10 INTO :NEW.FINE_AMOUNT FROM RETURNS WHERE RETURN_ID = ID;
END IF;
END;
/
